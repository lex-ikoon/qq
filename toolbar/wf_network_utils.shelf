<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="wf_network_utils" label="wf_network_utils">
    <memberTool name="wf_network_utils_create_object_merge"/>
    <memberTool name="wf_network_utils_create_object_merge_relative"/>
    <memberTool name="recook_container"/>
    <memberTool name="create_node_null"/>
    <memberTool name="create_node_switch"/>
    <memberTool name="create_node_transform"/>
    <memberTool name="create_node_awrangle"/>
    <memberTool name="create_node_merge"/>
    <memberTool name="create_g"/>
    <memberTool name="collect_by_name"/>
    <memberTool name="find_parm"/>
    <memberTool name="batch create geo"/>
    <memberTool name="selection_switch"/>
    <memberTool name="qrender hqueue render"/>
    <memberTool name="qfc_search_below_True"/>
    <memberTool name="qfc_search_below_False"/>
    <memberTool name="create_node_blast"/>
    <memberTool name="wf_create_sticky_label"/>
  </toolshelf>

  <tool name="recook_container" label="qq recook container" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import wf_network_utils
#import imp
#imp.reload(wf_network_utils)
wf_network_utils.recook_container()]]></script>
  </tool>

  <tool name="wf_network_utils_create_object_merge" label="qq object merge" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>_workflow</toolSubmenu>
    <script scriptType="python"><![CDATA[import wf_network_utils
#import imp
#imp.reload(wf_network_utils)

selected = hou.selectedNodes()
for node_src in selected :
    wf_network_utils.create_object_merge(node_src, False)]]></script>
  </tool>

  <tool name="create_node_null" label="create_node_null" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import wf_network_utils
#import imp
#imp.reload(wf_network_utils)
wf_network_utils.create_node('null')]]></script>
  </tool>

  <tool name="create_node_merge" label="create_node_merge" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import wf_network_utils
#import imp
#imp.reload(wf_network_utils)
wf_network_utils.create_node('merge')]]></script>
  </tool>

  <tool name="create_node_awrangle" label="create_node_awrangle" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import wf_network_utils
#import imp
#imp.reload(wf_network_utils)
wf_network_utils.create_node('attribwrangle')]]></script>
  </tool>

  <tool name="create_node_transform" label="create_node_transform" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import wf_network_utils
#import imp
#imp.reload(wf_network_utils)
wf_network_utils.create_node('xform')]]></script>
  </tool>

  <tool name="create_node_switch" label="create_node_switch" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import wf_network_utils
#import imp
#imp.reload(wf_network_utils)
wf_network_utils.create_node('switch')]]></script>
  </tool>

  <tool name="collect_by_name" label="collect_by_name" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou
import wf_selection
#import imp
#imp.reload(wf_selection)


query = hou.ui.readInput("Collect name:", buttons=("OK", "Cancel"))
pattern = query[1]
nodes = hou.node('/obj/').recursiveGlob(pattern)

for node_src in nodes :

    name_src = node_src.parent().name()

    #create, name, pos
    container = wf_selection.parmnode()
    name_mrg = "IN_" + name_src
    node_mrg = container.parent().createNode('object_merge',name_mrg)

    #parm
    path_src = node_src.path()
    parm = node_mrg.parm("objpath1")
    parm.set(path_src)]]></script>
  </tool>

  <tool name="find_parm" label="find_parm" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import wf_network_utils
#import imp
#imp.reload(wf_network_utils)
wf_network_utils.find_parm(None)]]></script>
  </tool>

  <tool name="batch create geo" label="batch create geo" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[array=['bripfloor','cripdepth','dmeshdepth','ebigleft','ebigright','fhead','ghair','hheaddisp','iblobs','jink','kraindrops','krainrip','ldropsrotate','lmaelstrom','mballmesh','nballwinleft','nballwinright','owindpara','paquarium','qcrown','rflower','ssemen','aripall']
for name_mrg in array :
    hou.node('/obj').createNode('geo',name_mrg)

]]></script>
  </tool>

  <tool name="selection_switch" label="selection_switch" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import wf_network_utils
#import imp
#imp.reload(wf_network_utils)
wf_network_utils.selection_switch()]]></script>
  </tool>

  <tool name="qrender hqueue render" label="qrender hqueue render" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextNetType>ROP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import wf_network_utils
#import imp
#imp.reload(wf_network_utils)
wf_network_utils.create_hqueue_render()]]></script>
  </tool>

  <tool name="qfc_search_below_True" label="qfc_search_below_True" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import wf_network_utils
#import imp
#imp.reload(wf_network_utils)

# -------------------
# iteration
def fc_iterate_downstream (node,go_below_fc) :
    global dependents
    global filecaches
    candidates = list(set(  node.outputs() + node.dependents()  ))

    for candidate in candidates :
        if candidate not in dependents :
            dependents.append(candidate)

            # candidate is filecache
            if candidate.type().name() == "filecache" :
                filecaches.append(candidate)

                # go below this filecache
                if go_below_fc == True :
                    fc_iterate_downstream(candidate,go_below_fc)

            # candidate is not a filecache
            else:
                fc_iterate_downstream(candidate,go_below_fc)

        # If candidate's parent is a dopnet, check also dopnet,
        # because Dop I/O is dependent on Dop Object,
        # which is often independent.
        parent = candidate.parent()
        if parent.type().name() == "dopnet" :
            if parent not in dependents :
                dependents.append(parent)
                fc_iterate_downstream(parent,go_below_fc)
# -------------------

# init lists
dependents  = []
filecaches  = []
node        = hou.selectedNodes()[0]
go_below_fc = True

# iterate
fc_iterate_downstream(node, go_below_fc)

# print list and copy to clipboard
wf_network_utils.fc_list_print(filecaches)]]></script>
  </tool>

  <tool name="qfc_search_below_False" label="qfc_search_below_False" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import wf_network_utils
#import imp
#imp.reload(wf_network_utils)

# -------------------
# iteration
def fc_iterate_downstream (node,go_below_fc) :
    global dependents
    global filecaches
    candidates = list(set(  node.outputs() + node.dependents()  ))

    for candidate in candidates :
        if candidate not in dependents :
            dependents.append(candidate)

            # candidate is filecache
            if candidate.type().name() == "filecache" :
                filecaches.append(candidate)

                # go below this filecache
                if go_below_fc == True :
                    fc_iterate_downstream(candidate,go_below_fc)

            # candidate is not a filecache
            else:
                fc_iterate_downstream(candidate,go_below_fc)

        # If candidate's parent is a dopnet, check also dopnet,
        # because Dop I/O is dependent on Dop Object,
        # which is often independent.
        parent = candidate.parent()
        if parent.type().name() == "dopnet" :
            if parent not in dependents :
                dependents.append(parent)
                fc_iterate_downstream(parent,go_below_fc)
# -------------------

# init lists
dependents  = []
filecaches  = []
node        = hou.selectedNodes()[0]
go_below_fc = False

# iterate
fc_iterate_downstream(node, go_below_fc)

# print list and copy to clipboard
wf_network_utils.fc_list_print(filecaches)]]></script>
  </tool>

  <tool name="create_node_blast" label="create_node_blast" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import wf_network_utils
#import imp
#imp.reload(wf_network_utils)
wf_network_utils.create_node('blast')]]></script>
  </tool>

  <tool name="create_g" label="create_g" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import wf_network_utils
#import imp
#imp.reload(wf_network_utils)
wf_network_utils.create_node('g')]]></script>
  </tool>

  <tool name="wf_network_utils_create_object_merge_relative" label="qq object merge relative" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>_workflow</toolSubmenu>
    <script scriptType="python"><![CDATA[import wf_network_utils
import imp
imp.reload(wf_network_utils)

selected = hou.selectedNodes()
for node_src in selected :
    wf_network_utils.create_object_merge(node_src, True)]]></script>
  </tool>

  <tool name="wf_create_sticky_label" label="qq sticky label" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>CHOP</contextNetType>
      <contextNetType>ROP</contextNetType>
      <contextNetType>SHOP</contextNetType>
      <contextNetType>COP2</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
      <contextNetType>DOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>_workflow</toolSubmenu>
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()

import wf_network_utils
#import imp
#imp.reload(wf_network_utils)
wf_network_utils.create_sticky_label(nodes)]]></script>
  </tool>
</shelfDocument>
