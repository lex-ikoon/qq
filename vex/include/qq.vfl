//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
float preview (int preview_toggle; float value_preview, value_final)
{

    if (preview_toggle)
    {
        return value_preview;
    }else{
        return value_final;
    }
}

int preview (int preview_toggle; int value_preview, value_final)
{

    if (preview_toggle)
    {
        return value_preview;
    }else{
        return value_final;
    }
}



//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
float clamp01(float value)
{
    return clamp(value,0,1);    
}




//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
string ftoa(float value)
{
    return sprintf("%g", value);
}



//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
string padzero(int size, value)
{
        string format = '%0' + itoa(size) + 'd';
        string eval   = sprintf(format, value) ;
        return eval;
}




//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
float blend( float array[]; float index )
{

    float value_0 , value_1;
    float index_01;
    float eval;

    value_0  = array [floor(       index   )];
    value_1  = array [floor(  ceil(index)  )];
    index_01 = index % 1;

    eval = fit01(index_01, value_0, value_1);

    return eval;
}



//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
vector euler_from_quat(vector4 orient)
{
    vector  eval;
    vector4 quaternion = orient;
    matrix m = matrix( qconvert( quaternion ) );
    eval = cracktransform(0, 0, 1, {0,0,0}, m);

    return eval;

}



//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
vector4 quat_from_zy(vector z,y)
{
    vector4 eval;
    matrix3 m = maketransform(z, y);
    eval = quaternion(m);
    return eval;
}




//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
vector2 range_random(float speed, speed_rand_min, speed_rand_max, length, length_rand_min, length_rand_max, seed, time; int both_directions)
{
    vector2 range;
    float center;
    float direction      = 1;

    float speed_rand     = rand(seed + 0.123);
    float length_rand    = rand(seed + 0.246);
    float direction_rand = rand(seed + 0.369);

    if ( direction_rand > 0.5   &&   both_directions == 1 ) {
        direction = -1;
    }

    speed_rand   = fit01(speed_rand , speed_rand_min, speed_rand_max);
    length_rand  = fit01(length_rand , length_rand_min, length_rand_max);

    length      *= length_rand;
    center       = direction * speed * speed_rand * (time + 123456.789);
    center       = center % 1;
    if (center<0.5) 
        length     = clamp (length, 0, center);
        // range[0]      = max(center - length, 0);
        // range[1]      = min(center + length, 2*length);
    else
        length     = clamp (length, 0, (1-center));
        // range[0]      = max(1-center - length, 1-2*length);
        // range[1]      = min(1, center + length);

        
    range[0]      = center - length * 0.5;
    range[1]      = center + length * 0.5;

    return range;
}




//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
float distort_bias(float value, bias) 
{
    float eval;
    if (value <= 0)
        eval = 0;
    else if (value >= 1)
        eval = 1;
    else
        eval = (1-bias) / (((1.0 / value) - 2) * (bias) + 1);
    return eval;
}



//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
float distort_bias_mirrored(float value, ease) 
{
    float eval = value;
    if(eval<0.5)
        eval = distort_bias(eval*2,ease)/2;
    else
        eval = 1 - distort_bias((1-eval)*2,ease)/2;

    return eval;
}





//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
float distort_segment(float dimension; int segment, segment_max; float offset_0, offset_1; int enable_gaps)
{
    float eval = dimension;
    float segment_rel = float (segment) / float(segment_max);
    float off_0, off_1;

    if (enable_gaps)
    {
        off_0 = min(offset_0,0.99999);
        off_1 = max(offset_1,0.00001);
    } 
    else
    {
        // correct offset to not overlap
        off_0 = fit01( offset_0,         0         ,  1-1/float(segment_max+1) );
        off_1 = fit01( offset_1, 1/float(segment_max+1) ,            1         );
    }

    float wide_min = segment_rel * off_0;
    float wide_max = 1-(1-segment_rel) * (1-off_1);

    eval = fit(eval, wide_min, wide_max, 0, 1);

    return eval;

}





//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
float coord_music(string track, array; int pitch, clone, frame)
{
    float  amp;
    string path    = "op:" + opfullpath(track) + "/generator/" + array;
    int    pitches = detail(path,"track_pitches",0);
    int    first   = detail(path,"array_frame_first",0);
    int    prim    = pitch + (clone * pitches);
    vector vertex  = vertex(path, "P", prim, frame-first);
           amp     = vertex[1];
    return amp;
}





//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
float fill_to_coord(float dimension, coord, feather_spread)
{
    float eval, trywide;
    trywide = fit01(coord, -feather_spread/2 , 1+feather_spread/2);

    if ( feather_spread>0 )
    {
        float omin = dimension - feather_spread/2;
        float omax = dimension + feather_spread/2;
        eval = fit(trywide, omin, omax, 0, 1);
    } else {
        if ( trywide > dimension )
        {
            eval = 1;
        } else {
            eval = 0;
        }
    }

    if (coord >= 1) eval = 1;
    if (coord <= 0) eval = 0;

    return eval;
}




//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
float geo_line_u (int geometry, ptnum)
{
    
    int linvert   = pointvertex (geometry, ptnum);
    int vertex    = vertexprimindex (geometry, linvert);
    int primnum[] = pointprims (geometry, ptnum);
    int count     = primvertexcount (geometry, primnum[0]);
    
    float eval    = vertex / float (count-1);

    return eval;
}




//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
void geo_carve_point (int geometry, primnum; float u)
{
    int oldprim = primnum;
    vector pos  = primuv(0, "P", primnum, set(u,0,0));
    vector N    = primuv(0, "N", primnum, set(u,0,0));
    vector up   = primuv(0, "up", primnum, set(u,0,0));
    
    int ptnum   = addpoint(0, pos);

    setpointattrib(0, "N", ptnum, N, "set");
    setpointattrib(0, "up", ptnum, up, "set");
    setpointattrib(0, "u", ptnum, u, "set");
    
    removeprim  (geometry, oldprim, 1);
}




//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
void geo_carve_line (int geometry, primnum; float start, end)
{

    vector getlinepos(int primnum; float u) {
        vector pos = primuv(0, "P", primnum, set(u,0,0));
        return pos;
    }
    int    createpoint(int primnum; vector pos) {
        int ptnum = addpoint(primnum, pos);
        int vertex = addvertex(0, primnum, ptnum);
        return vertex;
    }

    int oldprim  = primnum;
    int closed   = primintrinsic(geometry, "closed", oldprim);
    int segments = primvertexcount(geometry, oldprim) - 1 + closed;

    //---------------------------
    //---------------------------

    if (start==end){
        //nothing
    }

    //---------------------------
    //---------------------------

    if (start<end){
    
        int newprim = addprim(geometry, "polyline");
        setprimattrib(0, "newprim", newprim, primnum, "set");        

        //new point at start
        createpoint(newprim, getlinepos(oldprim, start));
                
        //points from prim
        int startvert, endvert;

        startvert  = 1 + floor(start * segments);
        endvert    = 1 + floor(end * segments);
        endvert    = min(endvert, segments);
        
        for (int i = startvert; i < endvert; i++)
        {
            vector vertpos = vertex(geometry, "P", oldprim, i);
            createpoint(newprim, vertpos);
        }

        //new point at end
        createpoint(newprim, getlinepos(oldprim, end));

    } 

    //---------------------------
    //---------------------------


    if (start>end){



        int newprim_beg = addprim(geometry, "polyline");
        setprimattrib(0, "newprim", newprim_beg, primnum, "set");
        
        //from prim
        int startvert, endvert;
        startvert  = 1 + floor(start * segments);
        endvert    = 1 + floor(end * segments);
        endvert    = min(endvert, segments);
        
        for (int i = 0; i < endvert; i++)
        {
            vector vertpos = vertex(geometry, "P", oldprim, i);
            createpoint(newprim_beg, vertpos);
        }
        
        //new point at end
        createpoint(newprim_beg, getlinepos(oldprim, end));
        
        //new point at start
        int newprim_end = addprim(geometry, "polyline");
        setprimattrib(0, "newprim", newprim_end, primnum, "set");

        createpoint(newprim_end, getlinepos(oldprim, start));
        
        //from prim
        for (int i = startvert; i <= segments; i++)
        {
            vector vertpos;
            if (i==segments && closed)
            {
                // this is special, on closed: last = firt        
                vertpos = vertex(geometry, "P", oldprim, 0);
            } else {
                // usual point
                vertpos = vertex(geometry, "P", oldprim, i);
            }
            createpoint(newprim_end, vertpos);
        }
    }

    //---------------------------
    //---------------------------

    removeprim(geometry, oldprim, 1);

    //return newprim;

}








//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
void mat_over(string actual, override_name, override_value; int override_is_string)
{
    string contents, add, value;
    value = override_value;
    contents = slice(actual,1,-1); // remove { }
    if (override_is_string) value = "'" + value + "'";
    add = "'" + override_name + "':" + value;
    actual = "{" + contents + add + ",}";
}



//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
vector noise_vstat (float px, py, pz , f, fx, fy, fz, ox, oy, oz; int turb; float rough, atten, amp )
{

    float x = px * f * fx - ox;
    float y = py * f * fy - oy;
    float z = pz * f * fz - oz;

    vector pos = set(x,y,z);
    vector noise;

    noise = onoise(pos, turb, rough, atten);
    noise = noise * amp;

    noise[0] = smooth(-1,1,noise[0]);
    noise[1] = smooth(-1,1,noise[1]);
    noise[2] = smooth(-1,1,noise[2]);

    return noise;

}



//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
vector noise_vanim_curl (float px, py, pz , f, fx, fy, fz, s, sx, sy, sz, st, ox, oy, oz, time; float amp )
{

    float x = px * f * fx - ox + s * sx * time;
    float y = py * f * fy - oy + s * sy * time;
    float z = pz * f * fz - oz + s * sz * time;
    float t =                    s * st * time;
    
    vector4 pos = set(x,y,z,t);
    vector noise;

    noise = curlnoise(pos);
    noise = noise * amp;

    return noise;

}




//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
vector noise_vanim (float px, py, pz , f, fx, fy, fz, s, sx, sy, sz, ox, oy, oz, time; int turb; float rough, atten, amp )
{

    float x = px * f * fx - ox + s * sx * time;
    float y = py * f * fy - oy + s * sy * time;
    float z = pz * f * fz - oz + s * sz * time;

    vector pos = set(x,y,z);
    vector noise;

    noise = onoise(pos, turb, rough, atten);
    noise = noise * amp;

    noise[0] = smooth(-1,1,noise[0]);
    noise[1] = smooth(-1,1,noise[1]);
    noise[2] = smooth(-1,1,noise[2]);

    return noise;

}




//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
float noise_fstat ( float pos, f, offset; int turb; float rough, atten, amp )
{

    float sample = pos * f - offset;
    float noise;

    noise = onoise(sample, turb, rough, atten);
    noise = noise * amp;

    noise = smooth(-1,1,noise);

    return noise;

}



//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
float noise_fanim_uv ( float u, v, f, su, sv, ou, ov, time; int turb; float rough, atten, amp )
{

    float x = u * f - ou + su * time;
    float y = v * f - ov + sv * time;
    float z = 12.3456789;

    vector pos = set(x,y,z);
    vector noise;

    noise = onoise(pos, turb, rough, atten);
    noise = noise * amp;

    float noise_x = getcomp(noise, 0);
    noise_x = smooth(-1,1,noise_x);

    return noise_x;

}




//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
vector noise_vanim_uv ( float u, v, f, su, sv, ou, ov, time; int turb; float rough, atten, amp )
{

    float x = u * f - ou + su * time;
    float y = v * f - ov + sv * time;
    float z = 12.3456789;

    vector pos = set(x,y,z);
    vector noise;

    noise = onoise(pos, turb, rough, atten);
    noise = noise * amp;

    noise[0] = smooth(-1,1,noise[0]);
    noise[1] = smooth(-1,1,noise[1]);
    noise[2] = smooth(-1,1,noise[2]);

    return noise;

}




//DON'T EDIT THIS FILE, IT GETS OVERWRITTEN BY A SCRIPT
vector vec_len_fit01(vector noise; float xmin, xmax, ymin, ymax, zmin, zmax)
{
    vector eval = noise;

    eval[0] = fit01(eval[0], xmin, xmax);
    eval[1] = fit01(eval[1], ymin, ymax);
    eval[2] = fit01(eval[2], zmin, zmax);

    return eval;
}






















